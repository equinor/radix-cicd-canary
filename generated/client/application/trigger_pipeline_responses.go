// Code generated by go-swagger; DO NOT EDIT.

package application

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// TriggerPipelineReader is a Reader for the TriggerPipeline structure.
type TriggerPipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TriggerPipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTriggerPipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewTriggerPipelineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewTriggerPipelineOK creates a TriggerPipelineOK with default headers values
func NewTriggerPipelineOK() *TriggerPipelineOK {
	return &TriggerPipelineOK{}
}

/*TriggerPipelineOK handles this case with default header values.

JobSummary holds general information about job
*/
type TriggerPipelineOK struct {
}

func (o *TriggerPipelineOK) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/pipelines/{pipelineName}][%d] triggerPipelineOK ", 200)
}

func (o *TriggerPipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewTriggerPipelineNotFound creates a TriggerPipelineNotFound with default headers values
func NewTriggerPipelineNotFound() *TriggerPipelineNotFound {
	return &TriggerPipelineNotFound{}
}

/*TriggerPipelineNotFound handles this case with default header values.

Not found
*/
type TriggerPipelineNotFound struct {
}

func (o *TriggerPipelineNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/{appName}/pipelines/{pipelineName}][%d] triggerPipelineNotFound ", 404)
}

func (o *TriggerPipelineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
