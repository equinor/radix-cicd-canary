// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledJobSummary ScheduledJobSummary holds general information about scheduled job
//
// swagger:model ScheduledJobSummary
type ScheduledJobSummary struct {

	// BatchName Batch name, if any
	// Example: \"batch-abc\
	BatchName string `json:"batchName,omitempty"`

	// Created timestamp
	// Example: 2006-01-02T15:04:05Z
	Created string `json:"created,omitempty"`

	// Ended timestamp
	// Example: 2006-01-02T15:04:05Z
	Ended string `json:"ended,omitempty"`

	// JobId JobId, if any
	// Example: \"job1\
	JobID string `json:"jobId,omitempty"`

	// Message of a status, if any, of the job
	// Example: \"Error occurred\
	Message string `json:"message,omitempty"`

	// Name of the scheduled job
	// Example: job-component-20181029135644-algpv-6hznh
	Name string `json:"name,omitempty"`

	// Array of ReplicaSummary
	ReplicaList []*ReplicaSummary `json:"replicaList"`

	// Started timestamp
	// Example: 2006-01-02T15:04:05Z
	Started string `json:"started,omitempty"`

	// Status of the job
	// Example: Waiting
	// Required: true
	// Enum: [Waiting Running Succeeded Stopping Stopped Failed]
	Status *string `json:"status"`
}

// Validate validates this scheduled job summary
func (m *ScheduledJobSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplicaList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledJobSummary) validateReplicaList(formats strfmt.Registry) error {
	if swag.IsZero(m.ReplicaList) { // not required
		return nil
	}

	for i := 0; i < len(m.ReplicaList); i++ {
		if swag.IsZero(m.ReplicaList[i]) { // not required
			continue
		}

		if m.ReplicaList[i] != nil {
			if err := m.ReplicaList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicaList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicaList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var scheduledJobSummaryTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Waiting","Running","Succeeded","Stopping","Stopped","Failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduledJobSummaryTypeStatusPropEnum = append(scheduledJobSummaryTypeStatusPropEnum, v)
	}
}

const (

	// ScheduledJobSummaryStatusWaiting captures enum value "Waiting"
	ScheduledJobSummaryStatusWaiting string = "Waiting"

	// ScheduledJobSummaryStatusRunning captures enum value "Running"
	ScheduledJobSummaryStatusRunning string = "Running"

	// ScheduledJobSummaryStatusSucceeded captures enum value "Succeeded"
	ScheduledJobSummaryStatusSucceeded string = "Succeeded"

	// ScheduledJobSummaryStatusStopping captures enum value "Stopping"
	ScheduledJobSummaryStatusStopping string = "Stopping"

	// ScheduledJobSummaryStatusStopped captures enum value "Stopped"
	ScheduledJobSummaryStatusStopped string = "Stopped"

	// ScheduledJobSummaryStatusFailed captures enum value "Failed"
	ScheduledJobSummaryStatusFailed string = "Failed"
)

// prop value enum
func (m *ScheduledJobSummary) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduledJobSummaryTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduledJobSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this scheduled job summary based on the context it is used
func (m *ScheduledJobSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReplicaList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledJobSummary) contextValidateReplicaList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReplicaList); i++ {

		if m.ReplicaList[i] != nil {
			if err := m.ReplicaList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("replicaList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("replicaList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledJobSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledJobSummary) UnmarshalBinary(b []byte) error {
	var res ScheduledJobSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
