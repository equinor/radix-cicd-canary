// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VulnerabilityScan VulnerabilityScan holds information about vulnerabilities found during scan
//
// swagger:model VulnerabilityScan
type VulnerabilityScan struct {

	// Reason for the status
	// Example: Scan results not found in output from scan job
	Reason string `json:"reason,omitempty"`

	// Status of the vulnerability scan
	// Example: Success
	// Required: true
	// Enum: [Success Missing]
	Status *string `json:"status"`

	// Overview of severities and count from list of vulnerabilities
	Vulnerabilities map[string]uint64 `json:"vulnerabilities,omitempty"`
}

// Validate validates this vulnerability scan
func (m *VulnerabilityScan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vulnerabilityScanTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Success","Missing"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vulnerabilityScanTypeStatusPropEnum = append(vulnerabilityScanTypeStatusPropEnum, v)
	}
}

const (

	// VulnerabilityScanStatusSuccess captures enum value "Success"
	VulnerabilityScanStatusSuccess string = "Success"

	// VulnerabilityScanStatusMissing captures enum value "Missing"
	VulnerabilityScanStatusMissing string = "Missing"
)

// prop value enum
func (m *VulnerabilityScan) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vulnerabilityScanTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VulnerabilityScan) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vulnerability scan based on context it is used
func (m *VulnerabilityScan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VulnerabilityScan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VulnerabilityScan) UnmarshalBinary(b []byte) error {
	var res VulnerabilityScan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
