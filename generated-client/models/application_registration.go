// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ApplicationRegistration ApplicationRegistration describe an application
// swagger:model ApplicationRegistration
type ApplicationRegistration struct {

	// AdGroups the groups that should be able to access the application
	// Required: true
	AdGroups []string `json:"adGroups"`

	// Name the unique name of the Radix application
	// Required: true
	Name *string `json:"name"`

	// PrivateKey the private part of the deploy key set or returned
	// after successful application
	PrivateKey string `json:"privateKey,omitempty"`

	// PublicKey the public part of the deploy key set or returned
	// after successful application
	PublicKey string `json:"publicKey,omitempty"`

	// Repository the github repository
	// Required: true
	Repository *string `json:"repository"`

	// SharedSecret the shared secret of the webhook
	// Required: true
	SharedSecret *string `json:"sharedSecret"`
}

// Validate validates this application registration
func (m *ApplicationRegistration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSharedSecret(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationRegistration) validateAdGroups(formats strfmt.Registry) error {

	if err := validate.Required("adGroups", "body", m.AdGroups); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationRegistration) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationRegistration) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

func (m *ApplicationRegistration) validateSharedSecret(formats strfmt.Registry) error {

	if err := validate.Required("sharedSecret", "body", m.SharedSecret); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationRegistration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationRegistration) UnmarshalBinary(b []byte) error {
	var res ApplicationRegistration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
