// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vulnerability Vulnerability holds detailed information about a vulnerability
//
// swagger:model Vulnerability
type Vulnerability struct {

	// A list of CVEs referencing the vulnerability
	// Example: ["CVE-2019-18276"]
	CVE []string `json:"cve"`

	// The CVSS value of the vulnerability
	// Example: 7.8
	CVSS float32 `json:"cvss,omitempty"`

	// A list of CWEs referencing the vulnerability
	// Example: ["CWE-273"]
	CWE []string `json:"cwe"`

	// A detailed description of the vulnerability
	// Example: An issue was discovered in disable_priv_mode in shell.c in GNU Bash through 5.0 patch 11. By default, if Bash is run with its effective UID not equal to its real UID...
	Description string `json:"description,omitempty"`

	// Name of the vulnerabile package
	// Example: bash
	// Required: true
	PackageName *string `json:"packageName"`

	// The date the vulnerability was published
	// Example: 2021-03-26T17:15:00Z
	PublishedDate string `json:"publishedDate,omitempty"`

	// A list of URLs with more information about the vulnerability
	// Example: ["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18276","https://github.com/bminor/bash/commit/951bdaad7a18cc0dc1036bba86b18b90874d39ff"]
	References []string `json:"references"`

	// The severity of the vulnerability
	// Example: HIGH
	// Required: true
	// Enum: [CRITICAL HIGH MEDIUM LOW UNKNOWN]
	Serverity *string `json:"severity"`

	// Name of the scanned target
	// Example: radixprod.azurecr.io/myapp-api:cz413 (debian 10.10)
	// Required: true
	Target *string `json:"target"`

	// Title of the vulnerability
	// Example: bash: when effective UID is not equal to its real UID the saved UID is not dropped
	Title string `json:"title,omitempty"`

	// Version of the affected package
	// Example: 5.0-4
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this vulnerability
func (m *Vulnerability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vulnerability) validatePackageName(formats strfmt.Registry) error {

	if err := validate.Required("packageName", "body", m.PackageName); err != nil {
		return err
	}

	return nil
}

var vulnerabilityTypeServerityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRITICAL","HIGH","MEDIUM","LOW","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vulnerabilityTypeServerityPropEnum = append(vulnerabilityTypeServerityPropEnum, v)
	}
}

const (

	// VulnerabilityServerityCRITICAL captures enum value "CRITICAL"
	VulnerabilityServerityCRITICAL string = "CRITICAL"

	// VulnerabilityServerityHIGH captures enum value "HIGH"
	VulnerabilityServerityHIGH string = "HIGH"

	// VulnerabilityServerityMEDIUM captures enum value "MEDIUM"
	VulnerabilityServerityMEDIUM string = "MEDIUM"

	// VulnerabilityServerityLOW captures enum value "LOW"
	VulnerabilityServerityLOW string = "LOW"

	// VulnerabilityServerityUNKNOWN captures enum value "UNKNOWN"
	VulnerabilityServerityUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *Vulnerability) validateServerityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vulnerabilityTypeServerityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Vulnerability) validateServerity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Serverity); err != nil {
		return err
	}

	// value enum
	if err := m.validateServerityEnum("severity", "body", *m.Serverity); err != nil {
		return err
	}

	return nil
}

func (m *Vulnerability) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

func (m *Vulnerability) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vulnerability based on context it is used
func (m *Vulnerability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Vulnerability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Vulnerability) UnmarshalBinary(b []byte) error {
	var res Vulnerability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
