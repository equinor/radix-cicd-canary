// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cicd-canary/generated-client/jobserver/models"
)

// CreateBatchReader is a Reader for the CreateBatch structure.
type CreateBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateBatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateBatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateBatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateBatchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateBatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateBatchOK creates a CreateBatchOK with default headers values
func NewCreateBatchOK() *CreateBatchOK {
	return &CreateBatchOK{}
}

/* CreateBatchOK describes a response with status code 200, with default header values.

Successful create batch
*/
type CreateBatchOK struct {
	Payload *models.BatchStatus
}

func (o *CreateBatchOK) Error() string {
	return fmt.Sprintf("[POST /batches][%d] createBatchOK  %+v", 200, o.Payload)
}
func (o *CreateBatchOK) GetPayload() *models.BatchStatus {
	return o.Payload
}

func (o *CreateBatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BatchStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBatchBadRequest creates a CreateBatchBadRequest with default headers values
func NewCreateBatchBadRequest() *CreateBatchBadRequest {
	return &CreateBatchBadRequest{}
}

/* CreateBatchBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateBatchBadRequest struct {
	Payload *models.Status
}

func (o *CreateBatchBadRequest) Error() string {
	return fmt.Sprintf("[POST /batches][%d] createBatchBadRequest  %+v", 400, o.Payload)
}
func (o *CreateBatchBadRequest) GetPayload() *models.Status {
	return o.Payload
}

func (o *CreateBatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBatchNotFound creates a CreateBatchNotFound with default headers values
func NewCreateBatchNotFound() *CreateBatchNotFound {
	return &CreateBatchNotFound{}
}

/* CreateBatchNotFound describes a response with status code 404, with default header values.

Not found
*/
type CreateBatchNotFound struct {
	Payload *models.Status
}

func (o *CreateBatchNotFound) Error() string {
	return fmt.Sprintf("[POST /batches][%d] createBatchNotFound  %+v", 404, o.Payload)
}
func (o *CreateBatchNotFound) GetPayload() *models.Status {
	return o.Payload
}

func (o *CreateBatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBatchUnprocessableEntity creates a CreateBatchUnprocessableEntity with default headers values
func NewCreateBatchUnprocessableEntity() *CreateBatchUnprocessableEntity {
	return &CreateBatchUnprocessableEntity{}
}

/* CreateBatchUnprocessableEntity describes a response with status code 422, with default header values.

Invalid data in request
*/
type CreateBatchUnprocessableEntity struct {
	Payload *models.Status
}

func (o *CreateBatchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /batches][%d] createBatchUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *CreateBatchUnprocessableEntity) GetPayload() *models.Status {
	return o.Payload
}

func (o *CreateBatchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateBatchInternalServerError creates a CreateBatchInternalServerError with default headers values
func NewCreateBatchInternalServerError() *CreateBatchInternalServerError {
	return &CreateBatchInternalServerError{}
}

/* CreateBatchInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type CreateBatchInternalServerError struct {
	Payload *models.Status
}

func (o *CreateBatchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /batches][%d] createBatchInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateBatchInternalServerError) GetPayload() *models.Status {
	return o.Payload
}

func (o *CreateBatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
