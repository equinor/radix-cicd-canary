// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cicd-canary/generated-client/jobserver/models"
)

// StopBatchReader is a Reader for the StopBatch structure.
type StopBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopBatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewStopBatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopBatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStopBatchOK creates a StopBatchOK with default headers values
func NewStopBatchOK() *StopBatchOK {
	return &StopBatchOK{}
}

/* StopBatchOK describes a response with status code 200, with default header values.

Successful stop batch
*/
type StopBatchOK struct {
	Payload *models.Status
}

func (o *StopBatchOK) Error() string {
	return fmt.Sprintf("[POST /batches/{batchName}/stop][%d] stopBatchOK  %+v", 200, o.Payload)
}
func (o *StopBatchOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopBatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopBatchNotFound creates a StopBatchNotFound with default headers values
func NewStopBatchNotFound() *StopBatchNotFound {
	return &StopBatchNotFound{}
}

/* StopBatchNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopBatchNotFound struct {
	Payload *models.Status
}

func (o *StopBatchNotFound) Error() string {
	return fmt.Sprintf("[POST /batches/{batchName}/stop][%d] stopBatchNotFound  %+v", 404, o.Payload)
}
func (o *StopBatchNotFound) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopBatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopBatchInternalServerError creates a StopBatchInternalServerError with default headers values
func NewStopBatchInternalServerError() *StopBatchInternalServerError {
	return &StopBatchInternalServerError{}
}

/* StopBatchInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StopBatchInternalServerError struct {
	Payload *models.Status
}

func (o *StopBatchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /batches/{batchName}/stop][%d] stopBatchInternalServerError  %+v", 500, o.Payload)
}
func (o *StopBatchInternalServerError) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopBatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
