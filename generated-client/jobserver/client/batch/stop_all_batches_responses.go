// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cicd-canary/generated-client/jobserver/models"
)

// StopAllBatchesReader is a Reader for the StopAllBatches structure.
type StopAllBatchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StopAllBatchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStopAllBatchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewStopAllBatchesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewStopAllBatchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStopAllBatchesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /batches/stop] stopAllBatches", response, response.Code())
	}
}

// NewStopAllBatchesOK creates a StopAllBatchesOK with default headers values
func NewStopAllBatchesOK() *StopAllBatchesOK {
	return &StopAllBatchesOK{}
}

/*
StopAllBatchesOK describes a response with status code 200, with default header values.

Successfully stopped batches
*/
type StopAllBatchesOK struct {
	Payload *models.Status
}

// IsSuccess returns true when this stop all batches o k response has a 2xx status code
func (o *StopAllBatchesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this stop all batches o k response has a 3xx status code
func (o *StopAllBatchesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches o k response has a 4xx status code
func (o *StopAllBatchesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop all batches o k response has a 5xx status code
func (o *StopAllBatchesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches o k response a status code equal to that given
func (o *StopAllBatchesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the stop all batches o k response
func (o *StopAllBatchesOK) Code() int {
	return 200
}

func (o *StopAllBatchesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesOK %s", 200, payload)
}

func (o *StopAllBatchesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesOK %s", 200, payload)
}

func (o *StopAllBatchesOK) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopAllBatchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopAllBatchesBadRequest creates a StopAllBatchesBadRequest with default headers values
func NewStopAllBatchesBadRequest() *StopAllBatchesBadRequest {
	return &StopAllBatchesBadRequest{}
}

/*
StopAllBatchesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type StopAllBatchesBadRequest struct {
	Payload *models.Status
}

// IsSuccess returns true when this stop all batches bad request response has a 2xx status code
func (o *StopAllBatchesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches bad request response has a 3xx status code
func (o *StopAllBatchesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches bad request response has a 4xx status code
func (o *StopAllBatchesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches bad request response has a 5xx status code
func (o *StopAllBatchesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches bad request response a status code equal to that given
func (o *StopAllBatchesBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the stop all batches bad request response
func (o *StopAllBatchesBadRequest) Code() int {
	return 400
}

func (o *StopAllBatchesBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesBadRequest %s", 400, payload)
}

func (o *StopAllBatchesBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesBadRequest %s", 400, payload)
}

func (o *StopAllBatchesBadRequest) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopAllBatchesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopAllBatchesNotFound creates a StopAllBatchesNotFound with default headers values
func NewStopAllBatchesNotFound() *StopAllBatchesNotFound {
	return &StopAllBatchesNotFound{}
}

/*
StopAllBatchesNotFound describes a response with status code 404, with default header values.

Not found
*/
type StopAllBatchesNotFound struct {
	Payload *models.Status
}

// IsSuccess returns true when this stop all batches not found response has a 2xx status code
func (o *StopAllBatchesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches not found response has a 3xx status code
func (o *StopAllBatchesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches not found response has a 4xx status code
func (o *StopAllBatchesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this stop all batches not found response has a 5xx status code
func (o *StopAllBatchesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this stop all batches not found response a status code equal to that given
func (o *StopAllBatchesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the stop all batches not found response
func (o *StopAllBatchesNotFound) Code() int {
	return 404
}

func (o *StopAllBatchesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesNotFound %s", 404, payload)
}

func (o *StopAllBatchesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesNotFound %s", 404, payload)
}

func (o *StopAllBatchesNotFound) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopAllBatchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStopAllBatchesInternalServerError creates a StopAllBatchesInternalServerError with default headers values
func NewStopAllBatchesInternalServerError() *StopAllBatchesInternalServerError {
	return &StopAllBatchesInternalServerError{}
}

/*
StopAllBatchesInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type StopAllBatchesInternalServerError struct {
	Payload *models.Status
}

// IsSuccess returns true when this stop all batches internal server error response has a 2xx status code
func (o *StopAllBatchesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this stop all batches internal server error response has a 3xx status code
func (o *StopAllBatchesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this stop all batches internal server error response has a 4xx status code
func (o *StopAllBatchesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this stop all batches internal server error response has a 5xx status code
func (o *StopAllBatchesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this stop all batches internal server error response a status code equal to that given
func (o *StopAllBatchesInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the stop all batches internal server error response
func (o *StopAllBatchesInternalServerError) Code() int {
	return 500
}

func (o *StopAllBatchesInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesInternalServerError %s", 500, payload)
}

func (o *StopAllBatchesInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /batches/stop][%d] stopAllBatchesInternalServerError %s", 500, payload)
}

func (o *StopAllBatchesInternalServerError) GetPayload() *models.Status {
	return o.Payload
}

func (o *StopAllBatchesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
