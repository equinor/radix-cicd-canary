// Code generated by go-swagger; DO NOT EDIT.

package batch

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cicd-canary/generated-client/jobserver/models"
)

// GetBatchJobReader is a Reader for the GetBatchJob structure.
type GetBatchJobReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetBatchJobReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetBatchJobOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetBatchJobNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetBatchJobInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetBatchJobOK creates a GetBatchJobOK with default headers values
func NewGetBatchJobOK() *GetBatchJobOK {
	return &GetBatchJobOK{}
}

/* GetBatchJobOK describes a response with status code 200, with default header values.

Successful get job
*/
type GetBatchJobOK struct {
	Payload *models.JobStatus
}

func (o *GetBatchJobOK) Error() string {
	return fmt.Sprintf("[GET /batches/{batchName}/jobs/{jobName}][%d] getBatchJobOK  %+v", 200, o.Payload)
}
func (o *GetBatchJobOK) GetPayload() *models.JobStatus {
	return o.Payload
}

func (o *GetBatchJobOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.JobStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchJobNotFound creates a GetBatchJobNotFound with default headers values
func NewGetBatchJobNotFound() *GetBatchJobNotFound {
	return &GetBatchJobNotFound{}
}

/* GetBatchJobNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetBatchJobNotFound struct {
	Payload *models.Status
}

func (o *GetBatchJobNotFound) Error() string {
	return fmt.Sprintf("[GET /batches/{batchName}/jobs/{jobName}][%d] getBatchJobNotFound  %+v", 404, o.Payload)
}
func (o *GetBatchJobNotFound) GetPayload() *models.Status {
	return o.Payload
}

func (o *GetBatchJobNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetBatchJobInternalServerError creates a GetBatchJobInternalServerError with default headers values
func NewGetBatchJobInternalServerError() *GetBatchJobInternalServerError {
	return &GetBatchJobInternalServerError{}
}

/* GetBatchJobInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type GetBatchJobInternalServerError struct {
	Payload *models.Status
}

func (o *GetBatchJobInternalServerError) Error() string {
	return fmt.Sprintf("[GET /batches/{batchName}/jobs/{jobName}][%d] getBatchJobInternalServerError  %+v", 500, o.Payload)
}
func (o *GetBatchJobInternalServerError) GetPayload() *models.Status {
	return o.Payload
}

func (o *GetBatchJobInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Status)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
