// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FailurePolicyRuleOnExitCodes FailurePolicyRuleOnExitCodes describes the requirement for handling
// a failed job replica based on its exit code.
//
// swagger:model FailurePolicyRuleOnExitCodes
type FailurePolicyRuleOnExitCodes struct {

	// Represents the relationship between the job replica's exit code and the
	// specified values. Replicas completed with success (exit code 0) are
	// excluded from the requirement check.
	// In FailurePolicyRuleOnExitCodesOpIn  The requirement is satisfied if the job replica's exit code is in the set of specified values.
	// NotIn FailurePolicyRuleOnExitCodesOpNotIn  The requirement is satisfied if the job replica's exit code is not in the set of specified values.
	// Required: true
	// Enum: ["In","NotIn"]
	Operator *string `json:"operator"`

	// Specifies the set of values. The job replica's exit code is checked against this set of
	// values with respect to the operator. The list must not contain duplicates.
	// Value '0' cannot be used for the In operator.
	// Required: true
	// Max Items: 255
	// Min Items: 1
	Values []int32 `json:"values"`
}

// Validate validates this failure policy rule on exit codes
func (m *FailurePolicyRuleOnExitCodes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var failurePolicyRuleOnExitCodesTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["In","NotIn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failurePolicyRuleOnExitCodesTypeOperatorPropEnum = append(failurePolicyRuleOnExitCodesTypeOperatorPropEnum, v)
	}
}

const (

	// FailurePolicyRuleOnExitCodesOperatorIn captures enum value "In"
	FailurePolicyRuleOnExitCodesOperatorIn string = "In"

	// FailurePolicyRuleOnExitCodesOperatorNotIn captures enum value "NotIn"
	FailurePolicyRuleOnExitCodesOperatorNotIn string = "NotIn"
)

// prop value enum
func (m *FailurePolicyRuleOnExitCodes) validateOperatorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, failurePolicyRuleOnExitCodesTypeOperatorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FailurePolicyRuleOnExitCodes) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *FailurePolicyRuleOnExitCodes) validateValues(formats strfmt.Registry) error {

	if err := validate.Required("values", "body", m.Values); err != nil {
		return err
	}

	iValuesSize := int64(len(m.Values))

	if err := validate.MinItems("values", "body", iValuesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("values", "body", iValuesSize, 255); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this failure policy rule on exit codes based on context it is used
func (m *FailurePolicyRuleOnExitCodes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FailurePolicyRuleOnExitCodes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailurePolicyRuleOnExitCodes) UnmarshalBinary(b []byte) error {
	var res FailurePolicyRuleOnExitCodes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
