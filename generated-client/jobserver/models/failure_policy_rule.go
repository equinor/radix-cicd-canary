// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FailurePolicyRule FailurePolicyRule describes how a job replica failure is handled when the onExitCodes rules are met.
//
// swagger:model FailurePolicyRule
type FailurePolicyRule struct {

	// Specifies the action taken on a job replica failure when the onExitCodes requirements are satisfied.
	// FailJob FailurePolicyRuleActionFailJob  This is an action which might be taken on a job replica failure - mark the  job as Failed and terminate all running pods.
	// Ignore FailurePolicyRuleActionIgnore  This is an action which might be taken on a job replica failure - the counter towards  .backoffLimit is not incremented and a replacement replica is created.
	// Count FailurePolicyRuleActionCount  This is an action which might be taken on a job replica failure - the replica failure  is handled in the default way - the counter towards .backoffLimit is incremented.
	// Required: true
	// Enum: ["FailJob","Ignore","Count"]
	Action *string `json:"action"`

	// on exit codes
	// Required: true
	OnExitCodes *FailurePolicyRuleOnExitCodes `json:"onExitCodes"`
}

// Validate validates this failure policy rule
func (m *FailurePolicyRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnExitCodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var failurePolicyRuleTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FailJob","Ignore","Count"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		failurePolicyRuleTypeActionPropEnum = append(failurePolicyRuleTypeActionPropEnum, v)
	}
}

const (

	// FailurePolicyRuleActionFailJob captures enum value "FailJob"
	FailurePolicyRuleActionFailJob string = "FailJob"

	// FailurePolicyRuleActionIgnore captures enum value "Ignore"
	FailurePolicyRuleActionIgnore string = "Ignore"

	// FailurePolicyRuleActionCount captures enum value "Count"
	FailurePolicyRuleActionCount string = "Count"
)

// prop value enum
func (m *FailurePolicyRule) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, failurePolicyRuleTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FailurePolicyRule) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *FailurePolicyRule) validateOnExitCodes(formats strfmt.Registry) error {

	if err := validate.Required("onExitCodes", "body", m.OnExitCodes); err != nil {
		return err
	}

	if m.OnExitCodes != nil {
		if err := m.OnExitCodes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onExitCodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onExitCodes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this failure policy rule based on the context it is used
func (m *FailurePolicyRule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOnExitCodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailurePolicyRule) contextValidateOnExitCodes(ctx context.Context, formats strfmt.Registry) error {

	if m.OnExitCodes != nil {

		if err := m.OnExitCodes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onExitCodes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("onExitCodes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FailurePolicyRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailurePolicyRule) UnmarshalBinary(b []byte) error {
	var res FailurePolicyRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
