// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// JobScheduleDescription JobScheduleDescription holds description about scheduling job
//
// swagger:model JobScheduleDescription
type JobScheduleDescription struct {

	// BackoffLimit defines attempts to restart job if it fails. Corresponds to BackoffLimit in K8s.
	BackoffLimit int32 `json:"backoffLimit,omitempty"`

	// ImageTagName defines the image tag name to use for the job image
	ImageTagName string `json:"imageTagName,omitempty"`

	// JobId Optional ID of a job
	// Example: 'job1'
	JobID string `json:"jobId,omitempty"`

	// Node defines node attributes, where container should be scheduled
	Node interface{} `json:"node,omitempty"`

	// Payload holding json data to be mapped to component
	// Example: {'data':'value'}
	Payload string `json:"payload,omitempty"`

	// Resource describes the compute resource requirements.
	Resources interface{} `json:"resources,omitempty"`

	// TimeLimitSeconds defines maximum job run time. Corresponds to ActiveDeadlineSeconds in K8s.
	TimeLimitSeconds int64 `json:"timeLimitSeconds,omitempty"`
}

// Validate validates this job schedule description
func (m *JobScheduleDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this job schedule description based on context it is used
func (m *JobScheduleDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *JobScheduleDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobScheduleDescription) UnmarshalBinary(b []byte) error {
	var res JobScheduleDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
