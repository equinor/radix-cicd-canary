// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BatchScheduleDescription BatchScheduleDescription holds description about batch scheduling job
//
// swagger:model BatchScheduleDescription
type BatchScheduleDescription struct {

	// Defines a user defined ID of the batch.
	// Example: 'batch-id-1'
	BatchID string `json:"batchId,omitempty"`

	// JobScheduleDescriptions descriptions of jobs to schedule within the batch
	// Required: true
	JobScheduleDescriptions []*JobScheduleDescription `json:"jobScheduleDescriptions"`

	// default radix job component config
	DefaultRadixJobComponentConfig *RadixJobComponentConfig `json:"defaultRadixJobComponentConfig,omitempty"`
}

// Validate validates this batch schedule description
func (m *BatchScheduleDescription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobScheduleDescriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultRadixJobComponentConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchScheduleDescription) validateJobScheduleDescriptions(formats strfmt.Registry) error {

	if err := validate.Required("jobScheduleDescriptions", "body", m.JobScheduleDescriptions); err != nil {
		return err
	}

	for i := 0; i < len(m.JobScheduleDescriptions); i++ {
		if swag.IsZero(m.JobScheduleDescriptions[i]) { // not required
			continue
		}

		if m.JobScheduleDescriptions[i] != nil {
			if err := m.JobScheduleDescriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobScheduleDescriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jobScheduleDescriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchScheduleDescription) validateDefaultRadixJobComponentConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DefaultRadixJobComponentConfig) { // not required
		return nil
	}

	if m.DefaultRadixJobComponentConfig != nil {
		if err := m.DefaultRadixJobComponentConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultRadixJobComponentConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultRadixJobComponentConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this batch schedule description based on the context it is used
func (m *BatchScheduleDescription) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobScheduleDescriptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDefaultRadixJobComponentConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BatchScheduleDescription) contextValidateJobScheduleDescriptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobScheduleDescriptions); i++ {

		if m.JobScheduleDescriptions[i] != nil {

			if swag.IsZero(m.JobScheduleDescriptions[i]) { // not required
				return nil
			}

			if err := m.JobScheduleDescriptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("jobScheduleDescriptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("jobScheduleDescriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BatchScheduleDescription) contextValidateDefaultRadixJobComponentConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DefaultRadixJobComponentConfig != nil {

		if swag.IsZero(m.DefaultRadixJobComponentConfig) { // not required
			return nil
		}

		if err := m.DefaultRadixJobComponentConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("defaultRadixJobComponentConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("defaultRadixJobComponentConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BatchScheduleDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BatchScheduleDescription) UnmarshalBinary(b []byte) error {
	var res BatchScheduleDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
