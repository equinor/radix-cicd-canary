// Code generated by go-swagger; DO NOT EDIT.

package component

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cicd-canary/generated-client/models"
)

// EnvVarsReader is a Reader for the EnvVars structure.
type EnvVarsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EnvVarsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEnvVarsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewEnvVarsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEnvVarsOK creates a EnvVarsOK with default headers values
func NewEnvVarsOK() *EnvVarsOK {
	return &EnvVarsOK{}
}

/*EnvVarsOK handles this case with default header values.

environment variables
*/
type EnvVarsOK struct {
	Payload []*models.EnvVar
}

func (o *EnvVarsOK) Error() string {
	return fmt.Sprintf("[GET /applications/{appName}/environments/{envName}/components/{componentName}/envvars][%d] envVarsOK  %+v", 200, o.Payload)
}

func (o *EnvVarsOK) GetPayload() []*models.EnvVar {
	return o.Payload
}

func (o *EnvVarsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEnvVarsNotFound creates a EnvVarsNotFound with default headers values
func NewEnvVarsNotFound() *EnvVarsNotFound {
	return &EnvVarsNotFound{}
}

/*EnvVarsNotFound handles this case with default header values.

Not found
*/
type EnvVarsNotFound struct {
}

func (o *EnvVarsNotFound) Error() string {
	return fmt.Sprintf("[GET /applications/{appName}/environments/{envName}/components/{componentName}/envvars][%d] envVarsNotFound ", 404)
}

func (o *EnvVarsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
