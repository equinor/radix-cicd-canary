// Code generated by go-swagger; DO NOT EDIT.

package pipeline_job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/equinor/radix-cicd-canary/generated-client/models"
)

// GetTektonPipelineRunTasksReader is a Reader for the GetTektonPipelineRunTasks structure.
type GetTektonPipelineRunTasksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTektonPipelineRunTasksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTektonPipelineRunTasksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetTektonPipelineRunTasksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTektonPipelineRunTasksNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTektonPipelineRunTasksOK creates a GetTektonPipelineRunTasksOK with default headers values
func NewGetTektonPipelineRunTasksOK() *GetTektonPipelineRunTasksOK {
	return &GetTektonPipelineRunTasksOK{}
}

/* GetTektonPipelineRunTasksOK describes a response with status code 200, with default header values.

List of Pipeline Run Tasks
*/
type GetTektonPipelineRunTasksOK struct {
	Payload []*models.PipelineRunTask
}

func (o *GetTektonPipelineRunTasksOK) Error() string {
	return fmt.Sprintf("[GET /applications/{appName}/jobs/{jobName}/pipelineruns/{pipelineRunName}/tasks][%d] getTektonPipelineRunTasksOK  %+v", 200, o.Payload)
}
func (o *GetTektonPipelineRunTasksOK) GetPayload() []*models.PipelineRunTask {
	return o.Payload
}

func (o *GetTektonPipelineRunTasksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTektonPipelineRunTasksUnauthorized creates a GetTektonPipelineRunTasksUnauthorized with default headers values
func NewGetTektonPipelineRunTasksUnauthorized() *GetTektonPipelineRunTasksUnauthorized {
	return &GetTektonPipelineRunTasksUnauthorized{}
}

/* GetTektonPipelineRunTasksUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetTektonPipelineRunTasksUnauthorized struct {
}

func (o *GetTektonPipelineRunTasksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /applications/{appName}/jobs/{jobName}/pipelineruns/{pipelineRunName}/tasks][%d] getTektonPipelineRunTasksUnauthorized ", 401)
}

func (o *GetTektonPipelineRunTasksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetTektonPipelineRunTasksNotFound creates a GetTektonPipelineRunTasksNotFound with default headers values
func NewGetTektonPipelineRunTasksNotFound() *GetTektonPipelineRunTasksNotFound {
	return &GetTektonPipelineRunTasksNotFound{}
}

/* GetTektonPipelineRunTasksNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetTektonPipelineRunTasksNotFound struct {
}

func (o *GetTektonPipelineRunTasksNotFound) Error() string {
	return fmt.Sprintf("[GET /applications/{appName}/jobs/{jobName}/pipelineruns/{pipelineRunName}/tasks][%d] getTektonPipelineRunTasksNotFound ", 404)
}

func (o *GetTektonPipelineRunTasksNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
