// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new job API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetApplicationJob gets the detail of a given job for a given application
*/
func (a *Client) GetApplicationJob(params *GetApplicationJobParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationJob",
		Method:             "GET",
		PathPattern:        "/applications/{appName}/jobs/{jobName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetApplicationJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApplicationJobOK), nil

}

/*
GetApplicationJobLogs gets a pipeline logs by combining different steps jobs logs
*/
func (a *Client) GetApplicationJobLogs(params *GetApplicationJobLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationJobLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationJobLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationJobLogs",
		Method:             "GET",
		PathPattern:        "/applications/{appName}/jobs/{jobName}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetApplicationJobLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApplicationJobLogsOK), nil

}

/*
GetApplicationJobs gets the summary of jobs for a given application
*/
func (a *Client) GetApplicationJobs(params *GetApplicationJobsParams, authInfo runtime.ClientAuthInfoWriter) (*GetApplicationJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetApplicationJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getApplicationJobs",
		Method:             "GET",
		PathPattern:        "/applications/{appName}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetApplicationJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetApplicationJobsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
